name: Loomvale Diagnose

on:
  workflow_dispatch:

jobs:
  diag:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install gspread google-auth google-auth-oauthlib google-api-python-client

      - name: Run connectivity + header check
        env:
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
          SHEET_ID: ${{ secrets.SHEET_ID }}
          PIPELINE_TAB: ${{ secrets.PIPELINE_TAB }}
        run: |
          python - <<'PY'
          import os, json, base64, re, sys
          import gspread
          from google.oauth2.service_account import Credentials

          def load_creds():
              raw = os.environ.get("GOOGLE_CREDENTIALS_JSON") or ""
              if not raw:
                  print("❌ Missing GOOGLE_CREDENTIALS_JSON secret."); sys.exit(1)
              if not raw.strip().startswith("{"):
                  raw = base64.b64decode(raw).decode("utf-8")
              info = json.loads(raw)
              print("✅ Service account:", info.get("client_email"))
              scopes = [
                  "https://www.googleapis.com/auth/spreadsheets",
                  "https://www.googleapis.com/auth/drive"
              ]
              return Credentials.from_service_account_info(info, scopes=scopes)

          creds = load_creds()
          gc = gspread.authorize(creds)

          sheet_id = os.environ.get("SHEET_ID")
          if not sheet_id:
              print("❌ Missing SHEET_ID secret."); sys.exit(1)

          sh = gc.open_by_key(sheet_id)
          tabs = [w.title for w in sh.worksheets()]
          print("✅ Found spreadsheet. Tabs:", tabs)

          wanted = os.environ.get("PIPELINE_TAB") or "Pipeline"
          try:
              ws = sh.worksheet(wanted)
              print(f"✅ Using worksheet: {wanted}")
          except Exception as e:
              print(f"⚠️ Tab '{wanted}' not found; using first sheet instead.")
              ws = sh.sheet1
              print("✅ Using first sheet:", ws.title)

          headers = [h.strip() for h in ws.row_values(1)]
          print("🧭 Header row (row 1):", headers)

          # Normalize to show what the bot will match
          def norm(s): return re.sub(r"[^a-z0-9]+","", (s or "").lower())
          normed = [norm(h) for h in headers]
          print("🧭 Normalized headers:", normed)

          # Expected (order A→I)
          expected_raw = [
            "Status","Topic","ImageSource","SourceLinks",
            "ImagePrompt_Ambience","ImagePrompt_Scenes",
            "Tone","Caption+Hashtags Prompt","Assistant"
          ]
          expected = [norm(x) for x in expected_raw]
          print("✅ Expected normalized headers:", expected)

          missing = [r for r in expected if r not in normed]
          if missing:
              print("❌ Missing required headers (normalized):", missing)
              print("   Fix your row 1 headers to EXACTLY:")
              print("   A Status | B Topic | C ImageSource | D SourceLinks | E ImagePrompt_Ambience | F ImagePrompt_Scenes | G Tone | H Caption+Hashtags Prompt | I Assistant")
          else:
              print("✅ Headers are compatible.")

          # Try a tiny write, then revert
          try:
              ws.update_acell("I2", "DIAG_OK")
              print("✍️  Wrote I2=DIAG_OK (Assistant). If you see this in the Sheet, permissions are OK.")
          except Exception as e:
              print("❌ Failed to write to the sheet. Share the Sheet with the service account email above as Editor.")
              print("   Error:", e)
              sys.exit(1)
          PY
